Contract FlashSwapTest(factory: UniswapV2Factory, mut callTimes: U256) implements UniswapV2Callee {

  const InvalidCaller = 0

  @using(preapprovedAssets = true, assetsInContract = true)
  pub fn uniswapV2Call(amount0: U256, amount1: U256, data: ByteVec) -> () {
    callTimes = callTimes + 1

    let pair = UniswapV2Pair(callerContractId!())
    let (token0Id, token1Id) = pair.getTokenPair()
    let pairId = subContractIdOf!(factory, token0Id ++ token1Id)
    checkCaller!(pairId == callerContractId!(), InvalidCaller)

    if (amount0 > 0) {
      transferTokenToSelf!(callerAddress!(), token0Id, amount0)
    }
    if (amount1 > 0) {
      transferTokenToSelf!(callerAddress!(), token1Id, amount1)
    }

    let t0 = byteVecSlice!(data, 0, 32)
    let a0 = u256From32Byte!(byteVecSlice!(data, 32, 64))
    if (a0 > 0) {
      transferTokenFromSelf!(callerAddress!(), t0, a0)
    }

    let t1 = byteVecSlice!(data, 64, 96)
    let a1 = u256From32Byte!(byteVecSlice!(data, 96, 128))
    if (a1 > 0) {
      transferTokenFromSelf!(callerAddress!(), t1, a1)
    }
  }
}
